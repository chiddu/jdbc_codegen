<?php

require_once('util.php');


$tab = "  ";



function getVarType($invar)
{
	$boom = explode("(", $invar);
	if($boom[0] == "int")
	{
		return "int";
	}
	if($boom[0] == "double")
	{
		return "double";
	}
	if($boom[0] == "tinyint")
	{
		return "int";
	}
	if($boom[0] == "varchar")
	{
		return "String";
	}
	if($boom[0] == "datetime")
	{
		return "Date";
	}
	if($boom[0] == "decimal")
	{
		return "BigDecimal";
	}
	if($boom[0] == "timestamp")
	{
		return "Date";
	}
	if($boom[0] == "date")
	{
		return "Date";
	}
	return "String";
}

function getName($invar,$firstone=false)
{
	$boom = explode("_", $invar);
	$ct = count($boom);
if($firstone)
	$var = ucfirst($boom[0]);
else
	$var = $boom[0];
	for($i = 1 ; $i   < $ct; $i++)
	{
		$var  = $var.ucfirst($boom[$i]);
	}
	return $var;
}

function getVar(&$columnDetails)
{
	$tab= "  ";
	$vv = "public ".
		$columnDetails['vartype'].
			" get".
			ucfirst($columnDetails['varname']).
				"()\n{\n"
				.$GLOBALS['tab'].
				"return "
				.$columnDetails['varname'].";\n}";
	$columnDetails['getVar'] = $vv;
}


function setVar(&$columnDetails)
{
	$tab = "  ";
	$vv = "public void set".
		ucfirst($columnDetails['varname']).
			"(final ".$columnDetails['vartype']." ".$columnDetails['varname'].")\n{\n";
	$vv = $vv.$GLOBALS['tab']."this.".$columnDetails['varname']." = ".$columnDetails['varname'].";\n}";   
	$columnDetails['setVar'] = $vv;
}

function getAuto($rowlist)
{
	foreach($rowlist as $id => $eachrow)
	{
			if($eachrow['Extra'] == 'auto_increment')
			{
				return $id;
			}
	}
	return -1;
}


function getUniquePrimary($rowlist)
{
	
	$leName = -1;
	$count = 0;

	foreach($rowlist as $id => $eachrow)
	{
			if($eachrow['Key'] == 'PRI')
			{
				$leName = $id;
				$count++;
			}
	}
	if( $count == 1)
		return $leName;

	return -1;
}


function getDbType($vartype)
{
	
	if($vartype == "int")
	{
		return "setInt";
	}
	if($vartype == "double")
	{
		return "setDouble";
	}
	if($vartype == "String")
	{
		return "setString";
	}
	if($vartype == "Date")
	{
		return "setTimestamp";
	}
	if($vartype == "BigDecimal")
	{
		return "setBigDecimal";
	}
	return "setString";
}

function prepareVariable(&$columnDetails)
{
	$fld = $columnDetails['Field'];
	$tab = "  " ; /* Two spaces */
	$varextra = "";

	if($columnDetails['Extra'] == 'auto_increment')
	{
		 $var = "@Id\n";
		 $var = $var.'@GeneratedValue(strategy=GenerationType.AUTO)
		 ';
		 $varextra = "  = 0";

	}
	else
	{
		$var = "";
	}
	 $var = $var."/** Field mapping. **/\n";
	 $var = $var. "@Column(name= \"". $fld ."\")\n";
	 $vartype = getVarType($columnDetails['Type']);
	 $dbvartype = getDbType($vartype);
	 $varname = getName($fld);
	 $var = $var."protected ".$vartype." ". $varname." ";
	 $columnDetails['varname'] = $varname;
	 $columnDetails['varfunc'] = "get".ucfirst($varname);
	 $columnDetails['setfunc'] = "set".ucfirst($varname);
	 $columnDetails['vartype'] = $vartype;
	 $columnDetails['dbset'] = $dbvartype;
	 $columnDetails['varline'] = $var.$varextra;
 	 getVar($columnDetails);
	 setVar($columnDetails);

}

$ini_list = parse_ini_file($argv[1]);

$dbh = new PDO('mysql:host=localhost;dbname='.$ini_list['dbname'], $ini_list['dbuser'],$ini_list['dbpwd'], array( PDO::ATTR_PERSISTENT => false));

$tablename = $argv[2];
$query = "desc ".$tablename;
$stmt = $dbh->query("desc ".$tablename);

$rowlist = $stmt->fetchAll();
foreach($rowlist as $id => $eachrow)
{
	prepareVariable($rowlist[$id]);
}

$autoId = getAuto($rowlist);

if($argv[3])
{
	$baseclassname = $argv[3];
}
else
{
	$baseclassname = getName($tablename);
}
$primaryId = getUniquePrimary($rowlist);

$uniqueIdStr = 'UUID.randomUUID().toString()';
$classname = ucfirst($baseclassname );

$topString = 'package '.$ini_list['basepackage'].'.basemodel;


import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;



import java.util.Date;
import java.math.BigDecimal;


/**
 *
 * @author autogenerated
 */



public class Base'.$classname.' 
{

';

$bottomString = "\n}";

echo($ini_list['rootfolder']."\n");
makeDirs($ini_list['rootfolder']);

$filname = $ini_list['rootfolder']."/basemodel/Base".$classname.".java";
$filname_1 = $ini_list['rootfolder']."/model/".$classname.".java";

$str = $topString;

foreach($rowlist as $eachrow)
{
	$str = $str. $eachrow['varline'].";\n\n";
}
foreach($rowlist as $eachrow)
{
	$str = $str. $eachrow['getVar']."\n";
	$str = $str. $eachrow['setVar']."\n";
}
$str = $str.$bottomString;
file_put_contents($filname,$str);


$modelDao = '
package '.$ini_list['basepackage'].'.model;

import javax.persistence.Entity;
import '.$ini_list['basepackage'].'.basemodel.Base'.$classname.';


@Entity (name = "'.$classname.'")
public class '.$classname.' extends Base'.$classname.'
{




}
';


if(!file_exists ($filname_1))
{
	file_put_contents($filname_1,$modelDao);
}






$fil2name = $ini_list['rootfolder']."/basedao/Base".$classname."Dao.java";
$fil2name_1 = $ini_list['rootfolder']."/dao/".$classname."Dao.java";

$daoStr = '
package '.$ini_list["basepackage"].'.basedao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Date;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.simple.ParameterizedBeanPropertyRowMapper;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import '.$ini_list['basepackage'].'.model.'.$classname.';


public class Base'.$classname.'Dao{

@Autowired public JdbcTemplate jdbcTemplate;

';

if(($autoId >= 0 )|| (  $primaryId >= 0 ) )
{
	$daoStr  = $daoStr.' 
	public final String INSERT_SQL = "INSERT INTO '.$tablename.'( ' ;

	$fll = 0;
	$insStr = "";
	$quesStr = "";
	$psStr = "";
	$counter = 1;
	foreach($rowlist as $id => $eachrow)
	{
		if($autoId == $id)
			continue;
		if($primaryId == $id)
		{
			$psStr = $psStr.$baseclassname.'.'.$eachrow['setfunc'].'('.$uniqueIdStr.');
		';
		}
		if($fll)
		{
			$insStr = $insStr.", ";
			$quesStr = $quesStr.", ";
		}
		else
		{
			$fll = 1;
		}
		$insStr = $insStr.$eachrow['Field'];
		$quesStr = $quesStr."?";
		if($eachrow['vartype'] != 'Date')
		{
			$psStr = $psStr.'ps.'.$eachrow['dbset']."(".$counter++.", ".$baseclassname.".".$eachrow['varfunc']."());\n";
		}
		else
		{
			$psStr = $psStr.'ps.'.$eachrow['dbset']."(".$counter++.", ".$eachrow['varname'].");\n";
		}

	}
	$insStr = $insStr.") values (".$quesStr.")\"; ";

	$daoStr = $daoStr.$insStr;


	$daoStr = $daoStr.'





	/* this should be conditional based on whether the id is present or not */
	@Transactional
	public void save(final '.$classname.' '.$baseclassname.') 
	{
	';
		if($autoId >= 0)
		{
			$daoStr = $daoStr.'if('.$baseclassname.'.get'.ucfirst($rowlist[$autoId]['varname']).'() == 0)';
		}
		else
		{
			$daoStr = $daoStr.'if('.$baseclassname.'.get'.ucfirst($rowlist[$primaryId]['varname']).'() == null)';
		}
	$daoStr = $daoStr.'	{

	KeyHolder keyHolder = new GeneratedKeyHolder();
	int update = jdbcTemplate.update(
			new PreparedStatementCreator() {
					public PreparedStatement 
					createPreparedStatement(Connection connection) throws SQLException {
	';
	foreach($rowlist as $id => $eachvar)
	{
		if($eachvar['vartype'] == 'Date')
		{
						$daoStr = $daoStr.'
					if('.$baseclassname.'.'.$eachvar['varfunc'].'() == null)
					{
					'.$baseclassname.'.'.$eachvar['setfunc'].'( new Date());
					}
					java.sql.Timestamp '.$eachvar['varname'].' = 
						new java.sql.Timestamp('.$baseclassname.".".$eachvar['varfunc'].'().getTime()); 
							';
		}
		else if(($eachvar['vartype'] == 'String') && ( $eachvar['Null'] == 'NO') &&
						( $eachvar['Default'] != '') )
		{
						$daoStr = $daoStr.'
					if('.$baseclassname.'.'.$eachvar['varfunc'].'() == null)
					{
					'.$baseclassname.'.'.$eachvar['setfunc'].'("'. $eachvar['Default'] .'"'.');
					}
					';

		}
	}



if($autoId >= 0) 
{
	$daoStr = $daoStr.'
					PreparedStatement ps =
									connection.prepareStatement(INSERT_SQL,new String[]{"'.$rowlist[$autoId]['varname'].'"});
	';
}
else
{
	$daoStr = $daoStr.'
					PreparedStatement ps =
									connection.prepareStatement(INSERT_SQL);
	';
}

	$daoStr = $daoStr.$psStr;

	$daoStr = $daoStr.'
							return ps;
						}
				}';
				

			if($autoId >= 0)
			{
				$daoStr = $daoStr.',
				keyHolder';
			}
				
				$daoStr = $daoStr.');
				';

			if($autoId >= 0)
			{
				$daoStr = $daoStr.'
				Number unId = keyHolder.getKey();
				'.$baseclassname.".".$rowlist[$autoId]["setfunc"].'(unId.intValue());
				';
			}

			$daoStr = $daoStr.'

		}
		else
		{

			String sql = "UPDATE '.
				$tablename.
					'  set ';

	$ctrarray = array();
	$ct2rarray = array();
	foreach($rowlist as $id => $eachvar)
	{
		if($id == $autoId)
			continue;
		if($id == $primaryId)
			continue;

		if(($eachvar['Field'] == 'created_time')
		|| ($eachvar['Field'] == 'created_at')
		|| (trim($eachvar['Extra']) == 'on update CURRENT_TIMESTAMP'))
		{
			continue;
		}
		$ctrarray[] = $eachvar['Field']." = ? ";
		$ct2rarray[] = $baseclassname.".".$eachvar['varfunc']."()";
	}
		$ct2rarray[] = $baseclassname.".".$rowlist[$autoId]['varfunc']."()";

	$daoStr = $daoStr.implode(",", $ctrarray)." where ".$rowlist[$autoId]['Field'].' = ? ";
	';
	$daoStr = $daoStr.'
			jdbcTemplate.update(sql, new Object[]{'. implode(",", $ct2rarray). '});
		}
	}
		
		@Transactional
		public void delete(int id) {
			String sql = "DELETE FROM '.$tablename.' WHERE '.$rowlist[$autoId]['Field'].'=?";
			jdbcTemplate.update(sql, new Object[]{id});
		}
		

	 public '.$classname.' getBy'.ucfirst($rowlist[$autoId]["varname"]).'(int id) {
			String sql = "SELECT * from '.$tablename.' where '.$rowlist[$autoId]["Field"] .' = ? ";
			List<'.$classname.'> retlist = jdbcTemplate.query(sql,
			new Object[]{'.$rowlist[$autoId]["varname"].'},
			ParameterizedBeanPropertyRowMapper.newInstance('.$classname.'.class));
			if(retlist.size() > 0)
				return retlist.get(0);
			return null;
		}

	';


}

$daoStr = $daoStr.'

}
';

file_put_contents($fil2name,$daoStr);


if(!file_exists ($fil2name_1))
{

$derString = '
package '.$ini_list['basepackage'].'.dao;

import org.springframework.stereotype.Repository;

import '.$ini_list['basepackage'].'.basedao.Base'.$classname.'Dao;
import '.$ini_list['basepackage'].'.model.'.$classname.';




@Repository(value = "'.$baseclassname.'Dao")
public class '.$classname.'Dao extends Base'.$classname.'Dao
{



}

';

file_put_contents($fil2name_1,$derString);

}



